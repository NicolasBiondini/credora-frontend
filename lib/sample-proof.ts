// Sample Groth16 proof for borrowing
// This is a hardcoded proof for demonstration purposes
// In a real application, this would be generated by a circuit

export interface ProofData {
  pA: readonly [bigint, bigint];
  pB: readonly [[bigint, bigint], [bigint, bigint]];
  pC: readonly [bigint, bigint];
  pubSignals: readonly [bigint, bigint, bigint, bigint, bigint];
}

// Sample proof - this should be replaced with actual proof generation
export const SAMPLE_PROOF: ProofData = {
  pA: [
    // @ts-expect-error bigint literal
    0x2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b141bac4b51e5d5d0n,
    // @ts-expect-error bigint literal
    0x2b1f6744cb58d6e61f8c508394c7842ad58375f94b05fbe2ca83fb1566450b21n,
  ] as const,
  pB: [
    [
      // @ts-expect-error bigint literal
      0x1e2061636b3c7c82252f3421e2d0bbb38499c4dfcbe4bce847a0db2f7f4afbdn,
      // @ts-expect-error bigint literal
      0x2b337de1c8c1c4b7ef327641ecb38a956e1f378d0f6939bd6b2e8fd1c9e6139n,
    ],
    [
      // @ts-expect-error bigint literal
      0x1b5feff8a2b4b8db2fb1342fd7bd9af5b9b6b8f4c8b6d1c7e4f8b2a5c9e7f1n,
      // @ts-expect-error bigint literal
      0x2c8e6f4d9a3b7c2e5f8a1d4b6e9c3f7a2b5d8e1f4c6b9a3d7e2f5c8b1a4n,
    ],
  ] as const,
  pC: [
    // @ts-expect-error bigint literal
    0x1f8b4c9d2e6a3f7b5d8e1c4a9f2b6d3e8c5a1f4b9e2d6c7a3f5b8d1e4c6n,
    // @ts-expect-error bigint literal
    0x2a5c8e1f4b9d3a6f2c7e5b8a1d4f9c2e6b3a7d5f8c1e4b9a2f6c3d7e5b8n,
  ] as const,
  pubSignals: [
    // @ts-expect-error bigint literal
    0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdefn, // borrower address
    // @ts-expect-error bigint literal
    0x1000000000000000000n, // loan amount (1 ETH in wei)
    // @ts-expect-error bigint literal
    0x500000000000000000n, // advance amount (0.5 ETH in wei)
    // @ts-expect-error bigint literal
    0x5n, // interest rate (5%)
    // @ts-expect-error bigint literal
    0x64c811bfn, // maturity timestamp (90 days from now)
  ] as const,
};
